import globals from 'globals';
import plugin from '@stylistic/eslint-plugin';
import plugin$1 from '@typescript-eslint/eslint-plugin';
import * as parser from '@typescript-eslint/parser';
import plugin$2 from 'eslint-plugin-vue';
import parser$1 from 'vue-eslint-parser';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

/**
 * 为规则列表新增插件名称空间
 * @param rules
 * @param namespace
 * @returns
 */
function createNSRules(rules, namespace) {
    if (!rules)
        return {};
    return Object.entries(rules).reduce(function (rules, _a) {
        var key = _a[0], value = _a[1];
        var hasNs = namespace == null || key.match(new RegExp("^".concat(namespace, "/")));
        var ruleName = hasNs ? key : "".concat(namespace, "/").concat(key);
        rules[ruleName] = value;
        return rules;
    }, {});
}

var rules$1 = {
    // Problems
    'array-callback-return': [2],
    'constructor-super': [2],
    'for-direction': [2],
    'getter-return': [2],
    'no-await-in-loop': [1],
    'no-class-assign': [2],
    'no-compare-neg-zero': [2],
    'no-cond-assign': [2],
    'no-const-assign': [2],
    'no-constant-binary-expression': [2],
    'no-constant-condition': [2],
    'no-constructor-return': [2],
    'no-control-regex': [2],
    'no-debugger': [2],
    'no-dupe-args': [2],
    'no-dupe-class-members': [2],
    'no-dupe-else-if': [2],
    'no-dupe-keys': [2],
    'no-duplicate-case': [2],
    'no-duplicate-imports': [2],
    'no-empty-character-class': [1],
    'no-empty-pattern': [1],
    'no-ex-assign': [2],
    'no-fallthrough': [2],
    'no-func-assign': [2],
    'no-import-assign': [2],
    'no-inner-declarations': [2, 'both'],
    'no-invalid-regexp': [2],
    'no-irregular-whitespace': [2],
    'no-loss-of-precision': [2],
    'no-misleading-character-class': [2],
    'no-new-native-nonconstructor': [2],
    'no-new-symbol': [2],
    'no-obj-calls': [2],
    'no-promise-executor-return': [2],
    'no-prototype-builtins': [0],
    'no-self-assign': [0],
    'no-self-compare': [0],
    'no-setter-return': [2],
    'no-sparse-arrays': [2],
    'no-template-curly-in-string': [1],
    'no-this-before-super': [2],
    'no-undef': [1],
    'no-unexpected-multiline': [1],
    'no-unmodified-loop-condition': [0],
    'no-unreachable': [2],
    'no-unreachable-loop': [2],
    'no-unsafe-finally': [2],
    'no-unsafe-negation': [2],
    'no-unsafe-optional-chaining': [0],
    'no-unused-private-class-members': [1],
    'no-unused-vars': [1],
    'no-use-before-define': [2, { functions: false, classes: false, variables: true, allowNamedExports: true }],
    'no-useless-backreference': [2],
    'require-atomic-updates': [0],
    'use-isnan': [2],
    'valid-typeof': [2],
    // Suggestions
    'accessor-pairs': [0],
    'arrow-body-style': [0],
    'block-scoped-var': [0],
    'camelcase': [0],
    'capitalized-comments': [0],
    'class-methods-use-this': [0]
};
function javascript(options) {
    if (options === void 0) { options = {}; }
    return [{
            languageOptions: {
                ecmaVersion: 'latest',
                globals: __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, globals.browser), globals.builtin), globals.commonjs), globals.es2021), globals.node), globals.nodeBuiltin), (options.globals || {})),
                parserOptions: {
                    ecmaFeatures: {
                        jsx: true
                    },
                    ecmaVersion: 'latest',
                    sourceType: 'module'
                }
            },
            linterOptions: {
                reportUnusedDisableDirectives: true
            },
            rules: __assign(__assign({}, rules$1), createNSRules(options.overrides, null))
        }];
}

var rules = {
    '@stylistic/array-bracket-newline': [2, 'consistent'],
    '@stylistic/array-bracket-spacing': [0],
    '@stylistic/array-element-newline': [2, 'consistent'],
    '@stylistic/arrow-parens': [0],
    '@stylistic/arrow-spacing': [2],
    '@stylistic/block-spacing': [2],
    '@stylistic/brace-style': [2],
    '@stylistic/comma-dangle': [0],
    '@stylistic/comma-spacing': [2, { before: false, after: true }],
    '@stylistic/comma-style': [2, 'last'],
    '@stylistic/computed-property-spacing': [2, 'never'],
    '@stylistic/dot-location': [2, 'property'],
    '@stylistic/eol-last': [2],
    '@stylistic/func-call-spacing': [2, 'never'],
    '@stylistic/function-call-argument-newline': [2, 'consistent'],
    '@stylistic/function-call-spacing': [0],
    '@stylistic/function-paren-newline': [2, 'consistent'],
    '@stylistic/generator-star-spacing': [0],
    '@stylistic/implicit-arrow-linebreak': [2, 'beside'],
    '@stylistic/indent': [2, 2],
    '@stylistic/indent-binary-ops': [0],
    '@stylistic/jsx-child-element-spacing': [0],
    '@stylistic/jsx-closing-bracket-location': [0],
    '@stylistic/jsx-closing-tag-location': [0],
    '@stylistic/jsx-curly-brace-presence': [0],
    '@stylistic/jsx-curly-newline': [0],
    '@stylistic/jsx-curly-spacing': [0],
    '@stylistic/jsx-equals-spacing': [0],
    '@stylistic/jsx-first-prop-new-line': [0],
    '@stylistic/jsx-indent': [0],
    '@stylistic/jsx-indent-props': [0],
    '@stylistic/jsx-max-props-per-line': [0],
    '@stylistic/jsx-newline': [0],
    '@stylistic/jsx-one-expression-per-line': [0],
    '@stylistic/jsx-pascal-case': [0],
    '@stylistic/jsx-props-no-multi-spaces': [0],
    '@stylistic/jsx-quotes': [2, 'prefer-double'],
    '@stylistic/jsx-self-closing-comp': [0],
    '@stylistic/jsx-sort-props': [0],
    '@stylistic/jsx-tag-spacing': [0],
    '@stylistic/jsx-wrap-multilines': [0],
    '@stylistic/key-spacing': [2, { beforeColon: false, afterColon: true, mode: 'strict' }],
    '@stylistic/keyword-spacing': [2, { before: true, after: true }],
    '@stylistic/linebreak-style': [0],
    '@stylistic/lines-around-comment': [0],
    '@stylistic/lines-between-class-members': [2, 'always'],
    '@stylistic/max-len': [0],
    '@stylistic/max-statements-per-line': [0],
    '@stylistic/member-delimiter-style': [0],
    '@stylistic/multiline-ternary': [0],
    '@stylistic/new-parens': [2, 'always'],
    '@stylistic/newline-per-chained-call': [0],
    '@stylistic/no-confusing-arrow': [0],
    '@stylistic/no-extra-parens': [0],
    '@stylistic/no-extra-semi': [0],
    '@stylistic/no-floating-decimal': [0],
    '@stylistic/no-mixed-operators': [0],
    '@stylistic/no-mixed-spaces-and-tabs': [2],
    '@stylistic/no-multi-spaces': [2],
    '@stylistic/no-multiple-empty-lines': [2, { max: 2, maxEOF: 0 }],
    '@stylistic/no-tabs': [2],
    '@stylistic/no-trailing-spaces': [2, { skipBlankLines: false, ignoreComments: true }],
    '@stylistic/no-whitespace-before-property': [2],
    '@stylistic/nonblock-statement-body-position': [2, 'beside', { overrides: {} }],
    '@stylistic/object-curly-newline': [2, { consistent: true }],
    '@stylistic/object-curly-spacing': [2, 'always'],
    '@stylistic/object-property-newline': [0],
    '@stylistic/one-var-declaration-per-line': [0],
    '@stylistic/operator-linebreak': [2, 'before'],
    '@stylistic/padded-blocks': [2, { classes: 'always' }],
    '@stylistic/padding-line-between-statements': [0],
    '@stylistic/quote-props': [0],
    '@stylistic/quotes': [2, 'single'],
    '@stylistic/rest-spread-spacing': [2, 'never'],
    '@stylistic/semi': [2, 'never'],
    '@stylistic/semi-spacing': [2, { before: false, after: false }],
    '@stylistic/semi-style': [2, 'last'],
    '@stylistic/space-before-blocks': [2, 'always'],
    '@stylistic/space-before-function-paren': [2, 'never'],
    '@stylistic/space-in-parens': [1, 'never'],
    '@stylistic/space-infix-ops': [2],
    '@stylistic/space-unary-ops': [2, { words: true, nonwords: false, overrides: {} }],
    '@stylistic/spaced-comment': [0],
    '@stylistic/switch-colon-spacing': [2, { before: false, after: true }],
    '@stylistic/template-curly-spacing': [0],
    '@stylistic/template-tag-spacing': [1, 'never'],
    '@stylistic/type-annotation-spacing': [0],
    '@stylistic/type-generic-spacing': [0],
    '@stylistic/type-named-tuple-spacing': [0],
    '@stylistic/wrap-iife': [2, 'inside'],
    '@stylistic/wrap-regex': [0],
    '@stylistic/yield-star-spacing': [2, { before: true, after: false }]
};
function stylistic(options) {
    if (options === void 0) { options = {}; }
    return [{
            plugins: {
                '@stylistic': plugin
            },
            rules: __assign(__assign({}, rules), createNSRules(options.overrides, '@stylistic'))
        }];
}

var DEFAULT_FILES$1 = [
    '**/*.?([cm])[jt]s?(x)'
];
function typescript(options) {
    if (options === void 0) { options = {}; }
    return [{
            files: options.files || DEFAULT_FILES$1,
            plugins: {
                '@typescript-eslint': plugin$1
            },
            languageOptions: {
                parser: parser,
                sourceType: 'module',
                ecmaVersion: 'latest',
                parserOptions: {
                    ecmaFeatures: {
                        jsx: true
                    },
                    ecmaVersion: 'latest'
                }
            }
        }, {
            files: options.files || DEFAULT_FILES$1,
            rules: __assign(__assign({}, plugin$1.configs.recommended.rules), createNSRules(options.overrides, '@typescript-eslint'))
        }];
}

var DEFAULT_FILES = ['**/*.vue'];
function vue(options) {
    if (options === void 0) { options = {}; }
    var version = options.version || 3;
    var rules = __assign(__assign(__assign({}, plugin$2.configs['base'].rules), plugin$2.configs[version === 2 ? 'essential' : 'vue3-essential'].rules), plugin$2.configs[version === 2 ? 'recommended' : 'vue3-recommended'].rules);
    return [{
            plugins: { vue: plugin$2 }
        }, {
            files: options.files || DEFAULT_FILES,
            languageOptions: {
                parser: parser$1,
                parserOptions: {
                    parser: options.typescript ? parser : null,
                    extraFileExtensions: ['.vue']
                },
                sourceType: 'module'
            },
            processor: plugin$2.processors['.vue'],
            rules: __assign(__assign({}, rules), createNSRules(options.overrides, 'vue'))
        }];
}

export { javascript, stylistic, typescript, vue };
